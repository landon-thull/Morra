import {loadStdlib} from '@reach-sh/stdlib';
import * as backend from './build/index.main.mjs';
const stdlib = loadStdlib(process.env);

const startingBalance = stdlib.parseCurrency(100);

const OUTCOME = ["A Wins", "Draw", "B Wins"]

const commonInteract = (who) => ({
  ...stdlib.hasRandom,
  getCount: () => {
    const count = Math.floor(Math.random() * 6);
    console.log(`${who} threw ${count} fingers`);
    if (Math.random() <= 0.01) {
      for ( let i = 0; i < 10; i++) {
        console.log(`${who} takes their sweet time sending it back...`);
        stdlib.wait(1);
      }
    }
    return count
  },
  getGuess: () => {
    const guess = Math.floor(Math.random() * 11);
    console.log(`${who} guessed ${guess} fingers`);
    return guess;
  },
  seeOutcome: (outcome) => {
    console.log(`${who} saw the outcome: ${OUTCOME[outcome]}`)
  },
  informTimeout: () => {
    console.log(`${who} observed a timeout`)
  }
})

const [ accAlice, accBob ] =
  await stdlib.newTestAccounts(2, startingBalance);
console.log('Hello, Alice and Bob!');

const fmt = (x) => stdlib.formatCurrency(x, 4);
const getBalance = async (who) => fmt(await stdlib.balanceOf(who));

const beforeAlice = await getBalance(accAlice);
const beforeBob = await getBalance(accBob);

console.log(`Balance Alice: ${beforeAlice}`);
console.log(`Balance Bob: ${beforeBob}`);

console.log('Launching...');
const ctcAlice = accAlice.contract(backend);
const ctcBob = accBob.contract(backend, ctcAlice.getInfo());

console.log('Starting backends...');

await Promise.all([
  ctcAlice.p.Alice({
    ...commonInteract("Alice"),
    wager: stdlib.parseCurrency(5),
    deadline: 30,
  }),
  ctcBob.p.Bob({
    ...commonInteract("Bob"),
    acceptWager: (amt) => {
      console.log(`Bob accepts the wager of ${fmt(amt)}`)
    }
  })
])

const afterAlice = await getBalance(accAlice);
const afterBob = await getBalance(accBob);

console.log(`Balance Alice: ${afterAlice}`);
console.log(`Balance Bob: ${afterBob}`);

console.log('Goodbye, Alice and Bob!');
